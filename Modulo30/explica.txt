Tarefa mód 25 -> 19/07

+ terminar o ExemplosVendasMod25 trazendo os implementos das classe "Produto" que tem no mód19
+ fazer os meus passou que o professor fez, só que dessas vez passando isso para Produto

1- Trazer a classe Produto
2- Criar a class ProdutoService e a Insterface IProdutoService
3- Criar a class ProdutoDAO e a Insterfacde IProdutoDAO
4- Criar tmb a class de BD(banco de dados) ProdutoDaoMock
5- E por último as classes de test -> ProdutoDAOTest e ProdutoTest


Tarefa mód 25 -> 20/07 / Concluida

+ Trouxe a classe Produto para ser implementada, criei as duas formas de testes, tanto no service como no Dao para serm testadas
+ Implementei as classe de regra de negócio -> ProdutoService e IProdutoService
+ Implementei também as classes de DAO para fazer (simular) o acesso do Banco de Dados

- Os dois testes foram concluidos com sucesso e não apresentarem erros!

/////////////////////////////////////////////////////////////////////////////

Acompanhameto dia anterior 21/08:
+ crie a classe de conexão -> jdbc/ConnectionFactory.java

+ implementei as alterações feitas pelo prof na aula 1, alterações na domain para o bd, add de ProdutoQuantidade e Venda, os dois tmb para receber a conexão com o bd.

+ ja na aula 1.2 ja comecei fazendo alterações no IClienteDAO(adicionei o ,Long depois do Cliente) e no  IGenericDAO, onde no method "consultar" deixei comentado o /* throws MaisDeUmRegistroException, TableException, DAOException*/ pois ainda tenho as classes deles para criar

+ isso ocasionou erro no ClienteDAO(que esta todo comentado para não ficar vermelho) e GenericDAO(que esta com muitos erros) // na pasta de test(test/dao(onde estao os mocks)) e services tmb esta com erro(mas continuar ignorando até chegar neles na aula)

/*

sql:

/* tb cliente */
create sequence sq_cliente
start 1
increment 1
owned by tb_cliente.id;

create table tb_cliente (
	id bigint,
	nome varchar(50) not null,
	cpf bigint not null,
	tel bigint not null,
	endereco varchar(50) not null,
	numero bigint not null,
	cidade varchar(50) not null,
	estado varchar(50) not null,
	constraint pk_id_cliente primary key(id)
);

/* tb produto */
create sequence sq_produto
start 1
increment 1
owned by tb_produto.id;

create table tb_produto(
	id bigint,
	codigo varchar(10) not null,
	nome varchar(50) not null,
	descricao varchar(100) not null,
	valor numeric(10,2) not null,
	constraint pk_id_produto primary key(id)
);

/* tb venda */
create sequence sq_venda
start 1
increment 1
owned by tb_venda.id;

create table tb_venda(
	id bigint,
	codigo varchar(10) not null,
	id_cliente_fk bigint not null,
	valor_total numeric(10,2) not null,
	data_venda TIMESTAMPTZ not null,
	status_venda varchar(50) not null,
	constraint pk_id_venda primary key(id),
	constraint fk_id_cliente_venda foreign key(id_cliente_fk) references tb_cliente(id)
);

/* tb produto_quantidade */
create sequence sq_produto_quantidade
start 1
increment 1
owned by tb_produto_quantidade.id;

create table tb_produto_quantidade(
	id bigint,
	id_produto_fk bigint not null,
	id_venda_fk bigint not null,
	quantidade int not null,
	valor_total numeric(10,2) not null,
	constraint pk_id_prod_venda primary key(id),
	constraint fk_id_prod_venda foreign key(id_produto_fk) references tb_produto(id),
	constraint fk_id_prod_venda_venda foreign key(id_venda_fk) references tb_venda(id)
);

ALTER TABLE TB_CLIENTE
ADD CONSTRAINT UK_CPF_CLIENTE UNIQUE (CPF);

ALTER TABLE TB_PRODUTO
ADD CONSTRAINT UK_CODIGO_PRODUTO UNIQUE (CODIGO);

ALTER TABLE TB_VENDA
ADD CONSTRAINT UK_CODIGO_VENDA UNIQUE (CODIGO);


SELECT V.ID AS ID_VENDA, V.CODIGO, V.ID_CLIENTE_FK, V.VALOR_TOTAL, V.DATA_VENDA, V.STATUS_VENDA,
C.ID AS ID_CLIENTE, C.NOME, C.CPF, C.TEL, C.ENDERECO, C.NUMERO, C.CIDADE, C.ESTADO,
P.ID AS ID_PROD_QTD, P.QUANTIDADE, P.VALOR_TOTAL AS PROD_QTD_VALOR_TOTAL
FROM TB_VENDA V 
INNER JOIN TB_CLIENTE C ON V.ID_CLIENTE_FK = C.ID
INNER JOIN TB_PRODUTO_QUANTIDADE P ON P.ID_VENDA_FK = V.ID
WHERE V.CODIGO = 'A1';


SELECT PQ.ID, PQ.QUANTIDADE, PQ.VALOR_TOTAL,
P.ID AS ID_PRODUTO, P.CODIGO, P.NOME, P.DESCRICAO, P.VALOR
FROM TB_PRODUTO_QUANTIDADE PQ
INNER JOIN TB_PRODUTO P ON P.ID = PQ.ID_PRODUTO_FK;

*/
